# Caddy Configuration for n8n Local Deployment
# 
# For production use:
# 1. Replace 'localhost' with your actual domain name
# 2. Caddy will automatically obtain SSL certificates via Let's Encrypt
# 3. Update the N8N_HOST and WEBHOOK_URL environment variables accordingly

# Main n8n editor interface
localhost {
    # Reverse proxy to n8n main service
    reverse_proxy n8n:5678 {
        # Health check configuration
        health_uri /healthz
        health_interval 10s
        health_timeout 5s
        
        # Header modifications
        header_up Host {upstream_hostport}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }
    
    # Enable access logging
    log {
        output file /data/access.log {
            roll_size 100MB
            roll_keep 5
            roll_keep_for 720h
        }
        format json
    }
    
    # Enable gzip compression
    encode gzip
    
    # Security headers
    header {
        # HSTS (HTTP Strict Transport Security)
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        
        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"
        
        # XSS Protection
        X-XSS-Protection "1; mode=block"
        
        # Clickjacking protection
        X-Frame-Options "SAMEORIGIN"
        
        # Referrer Policy
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Remove server information
        -Server
    }
    
    # Optional: Enable basic authentication
    # Uncomment and update credentials as needed
    # basicauth {
    #     # Username: admin, Password: your-secure-password
    #     # Generate hash with: caddy hash-password --plaintext your-secure-password
    #     admin $2a$14$example-bcrypt-hash-here
    # }
}

# Webhook endpoint (if using separate webhook process)
webhook.localhost {
    reverse_proxy n8n-webhook:5678 {
        health_uri /healthz
        health_interval 10s
        health_timeout 5s
    }
    
    # Webhooks typically need different security settings
    header {
        # Allow webhooks to be embedded (for some integrations)
        -X-Frame-Options
        
        # Less restrictive CORS for webhooks
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
    }
    
    # Handle preflight requests
    @options {
        method OPTIONS
    }
    respond @options 204
    
    log {
        output file /data/webhook-access.log {
            roll_size 100MB
            roll_keep 5
        }
        format json
    }
}

# Production domain example (commented out)
# Replace with your actual domain
# your-domain.com {
#     reverse_proxy n8n:5678 {
#         health_uri /healthz
#         health_interval 10s
#         health_timeout 5s
#     }
#     
#     # Production security headers
#     header {
#         Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
#         X-Content-Type-Options "nosniff"
#         X-XSS-Protection "1; mode=block"
#         X-Frame-Options "DENY"
#         Referrer-Policy "strict-origin-when-cross-origin"
#         Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss:;"
#         -Server
#     }
#     
#     # Rate limiting for production
#     rate_limit {
#         zone dynamic_rate_limit {
#             key {remote_host}
#             events 100
#             window 1m
#         }
#     }
#     
#     log {
#         output file /data/production-access.log
#         format json
#     }
# }

# Admin panel (optional - for Caddy management)
# admin.localhost {
#     reverse_proxy localhost:2019
#     
#     basicauth {
#         admin $2a$14$example-admin-hash
#     }
# } 